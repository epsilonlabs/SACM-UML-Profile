@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@namespace(uri="http://www.omg.org/spec/SACM/2.0", prefix="sacm")
package SACM;

@namespace(uri="http://www.omg.org/spec/SACM/2.0/Commons", prefix="SACM_Commons")
package Commons {
  abstract class SACMElement {
  }

  abstract class ModelElement extends SACMElement {

    attr String gid;
    attr String name;
    attr Boolean isAbstract;
    val Description description;
    val ImplementationConstraint[*] inplementationConstraint;
    val Note[*] note;
    val TaggedValue[*] taggedValue;
  }

  abstract class UtilityElement extends SACMElement {
    attr String sExpression;
    val Terminology.Expression expression;
  }

  class ImplementationConstraint extends UtilityElement {
  }

  class Description extends UtilityElement {
  }

  class Note extends UtilityElement {
  }

  class TaggedValue extends UtilityElement {
    attr String sKey;
    val Terminology.Expression key;
  }

}

@namespace(uri="http://www.omg.org/spec/SACM/2.0/Packages", prefix="SACM_Packages")
package Packages {
  class AssuranceCasePackage extends Artefact.ArtefactElement {
    val AssuranceCasePackageCitation[*] assuranceCasePackageCitation;
    val AssuranceCasePackage[*] assuranceCasePackage;
    ref AssuranceCasePackageInterface[*] ~interface;
    val Argumentation.ArgumentPackage[*] argumentPackage;
    val Artefact.ArtefactPackage[*] artefactPackage;
    val Terminology.TerminologyPackage[*] terminologyPackage;
  }

  class AssuranceCasePackageInterface extends AssuranceCasePackage {
  }

  class AssuranceCasePackageCitation extends AssuranceCasePackage {
    ref AssuranceCasePackage[1] citedPackage;
  }

}

@namespace(uri="http://www.omg.org/spec/SACM/2.0/Terminology", prefix="SACM_Terminology")
package Terminology {
  abstract class TerminologyElement extends Commons.ModelElement {
  }

  class TerminologyPackage extends TerminologyElement {
    val TerminologyAsset[*] terminologyAsset;
    val TerminologyPackage[*] terminologyPackage;
    val TerminologyPackageCitation[*] terminologyPackageCitation;
  }

  class TerminologyPackageCitation extends TerminologyPackage {
    ref TerminologyPackage citedPackage;
  }

  abstract class TerminologyAsset extends TerminologyElement {
  }

  class Category extends TerminologyAsset {
  }

  abstract class ExpressionElement extends TerminologyAsset {
    ref Category[*] category;
  }

  class Expression extends ExpressionElement {
    attr String value;
	//need to discuss if this is val or ref
    val ExpressionElement[*] element;
  }

  class Term extends ExpressionElement {
    attr String value;
    attr String externalReference;
    ref Commons.ModelElement origin;
  }

  class TerminologyAssetCitation extends ExpressionElement {
    ref TerminologyAsset[1] citedElement;
  }

}

@namespace(uri="http://www.omg.org/spec/SACM/2.0/Argumentation", prefix="SACM_Argumentation")
package Argumentation {
  abstract class ArgumentationElement extends Commons.ModelElement {
    attr String content;
  }

  class ArgumentPackage extends ArgumentationElement {
    val ArgumentAsset[*] argumentAsset;
    val ArgumentPackage[*] argumentPackage;
    ref ArgumentPackageInterface[*] ~interface;
    val ArgumentPackageCitation[*] argumentPackageCitation;
  }

  class ArgumentPackageCitation extends ArgumentPackage {
    ref ArgumentPackage[1] citedPackage;
  }

  class ArgumentPackageBinding extends ArgumentPackage {
    ref ArgumentPackage[2..*] participantPackage;
  }

  class ArgumentPackageInterface extends ArgumentPackage {
  }

  abstract class ArgumentAsset extends ArgumentationElement {
  }

  abstract class Assertion extends ArgumentAsset {
    val Claim[*] metaClaim;
  }

  class ArtefactElementCitation extends ArgumentAsset {
    attr String externalReference;
    ref Artefact.ArtefactElement citedArtefact;
  }

  class ArgumentAssetCitation extends ArgumentAsset {
    ref ArgumentAsset[1] citedAsset;
  }

  class Claim extends Assertion {
    attr Boolean assumed;
    attr Boolean toBeSupported;
  }

  class ArgumentReasoning extends ArgumentAsset {
    ref ArgumentPackage structure;
  }

  abstract class AssertedRelationship extends Assertion {
    ref ArgumentAsset[*] source;
    ref ArgumentAsset[*] target;
    ref ArgumentReasoning reasoning;
  }

  class AssertedInference extends AssertedRelationship {
  }

  class AssertedEvidence extends AssertedRelationship {
  }

  class AssertedChallenge extends AssertedRelationship {
  }

  class AssertedCounterEvidence extends AssertedRelationship {
  }

  class AssertedContext extends AssertedRelationship {
  }

}

@namespace(uri="http://www.omg.org/spec/SACM/2.0/Artefact", prefix="SACM_Artefact")
package Artefact {
  abstract class ArtefactElement extends Commons.ModelElement {
  }

  class ArtefactPackage extends ArtefactElement {
    val ArtefactPackageCitation[*] artefactPackageCitation;
    val ArtefactAsset[*] artefactAsset;
    val ArtefactPackage[*] artefactPackage;
    ref ArtefactPackageInterface[*] ~interface;
  }

  class ArtefactPackageCitation extends ArtefactPackage {
    ref ArtefactPackage[1] citedPackage;
  }

  class ArtefactPackageBinding extends ArtefactPackage {
    ref ArtefactPackage[2..*] participantpackage;
  }

  class ArtefactPackageInterface extends ArtefactPackage {
  }

  abstract class ArtefactAsset extends ArtefactElement {
  }

  class ArtefactAssetCitation extends ArtefactAsset {
    ref ArtefactAsset[1] citedAsset;
  }

  class Artefact extends ArtefactAsset {
    attr String version;
    attr EDate date;
    val ArtefactProperty[*] artefactProperty;
    val ArtefactEvent[*] artefactEvent;
  }

  class ArtefactProperty extends ArtefactAsset {
  }

  class ArtefactEvent extends ArtefactAsset {
    attr EDate date;
  }

  class Resource extends ArtefactAsset {
    attr String location;
  }

  class Activity extends ArtefactAsset {
    attr EDate startTime;
    attr EDate endTime;
  }

  class Technique extends ArtefactAsset {
  }

  class Participant extends ArtefactAsset {
  }

  abstract class ArtefactAssetRelationship extends ArtefactAsset {
    ref ArtefactAsset[*] source;
    ref ArtefactAsset[*] target;
  }

  class ArtefactRelationship extends ArtefactAssetRelationship {
  }

  class ActivityRelationship extends ArtefactAssetRelationship {
  }

  class ArtefactActivityRelationship extends ArtefactAssetRelationship {
  }

  class ArtefactTechniqueRelationship extends ArtefactAssetRelationship {
  }

  class ParticipantRoleRelationship extends ArtefactAssetRelationship {
  }

  class ArtefactResourceRelationship extends ArtefactAssetRelationship {
  }

}


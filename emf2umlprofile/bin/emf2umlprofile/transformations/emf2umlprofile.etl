pre {
	var profile = new Profile!Profile;
	var classImport = new Profile!ElementImport;
	classImport.`alias` = "Class";
	classImport.importedElement = UMLM2!Class.all.selectOne(c|c.name = "Class");
	profile.metaclassReference.add(classImport);
	var ePackage = new Profile!EPackage;
	createUMLAnnotationsForVersions(profile);
	//var associationImport = new Profile!ElementImport;
	//associationImport.`alias` = "Association";
	profile.name = "RootElement";
	//var baseAssociationProperty = new Profile!Property;
	//baseAssociationProperty.name = "base_association";
	profile.elementImport.add(classImport);
	//profile.elementImport.add(associationImport);
}

rule class2stereotype 
	transform c : Source!EClass 
	to s : Profile!Stereotype {
	guard : not (c.name = "Class") 
		s.name = c.name;
		("Hello").println();
		profile.ownedStereotype.add(s);
		var newClass = new Profile!EClass;
		newClass.name = c.name;
		ePackage.eClassifiers.add(newClass);
		var theEAnnotationOfThisStereotype = new Profile!EAnnotation;
		theEAnnotationOfThisStereotype.source = "http://www.eclipse.org/uml2/2.0.0/UML";
		theEAnnotationOfThisStereotype.references.add(s);
		newClass.eAnnotations.add(theEAnnotationOfThisStereotype);
		var baseClassProperty = new Profile!Property;
		baseClassProperty.name = "base_Class";
		//theEReferenceBaseClass.EType = Profile!EClass.all.selectOne(c|c.name = "Class");
		baseClassProperty.type = UMLM2!Class.all.selectOne(c|c.name = "Class");
		
		var theEReferenceBaseClass = new Profile!EReference;
		theEReferenceBaseClass.name = "base_Class";
		theEReferenceBaseClass.lowerBound = 1;
		theEReferenceBaseClass.ordered = false;
		newClass.eStructuralFeatures.add(theEReferenceBaseClass);
		var theEGenericType = new Profile!EGenericType;
		("Hi").println();
		theEReferenceBaseClass.eGenericType = theEGenericType;
		
		// TODO: Add property to stereotype
		s.ownedAttribute.add(baseClassProperty);
		if (not (c.eSupertypes.select(a | a.name.equals("Class"))).isEmpty) {
			var extension = new Profile!Extension;			
			extension.name = "E_" + c.name + "_Class1";
			var extensionEnd = new Profile!ExtensionEnd;
			extensionEnd.name = "extension_" + c.name;
			extensionEnd.isComposite = true;
			extensionEnd.type = s;
			profile.packagedElements.add(extension);
			extension.ownedEnd.add(extensionEnd);
			extension.memberEnd.add(baseClassProperty);
			extension.endType.add(UMLM2!Class.all.selectOne(c|c.name = "Class"));
			//extension.metaclass = new Profile!Class;
			//extension.relatedElement.add(s);
		}
		for (st in c.eSupertypes) {
			if (not st.name.equals("Class")) {
				var generalisation = new Profile!Generalization;
				var myParent = Profile!Stereotype.all().selectOne(stype | stype.name.equals(st.name)); 
				generalisation.general = myParent;
				s.generalization.add(generalisation);
			}
		}
		theEGenericType.EClassifier = UMLEcore!EClass.all().selectOne(c|c.name = "Class").println();
	}
	
operation createUMLAnnotationsForVersions(profile) {
	var theAnnotation = new Profile!EAnnotation;
	theAnnotation.source = "http://www.eclipse.org/uml2/2.0.0/UML";
	profile.eAnnotations.add(theAnnotation);
	ePackage.name = "RootElement";
	ePackage.NsPrefix = "RootElement";
	ePackage.nsUri = "http:///schemas/RootElement/something/1";
	theAnnotation.contents.add(ePackage);
	var papyrusVersionEAnnotation = new Profile!EAnnotation;
	papyrusVersionEAnnotation.source = "PapyrusVersion";
	ePackage.eAnnotations.add(papyrusVersionEAnnotation);
	var versionMap = new Profile!EStringToStringMapEntry;
	versionMap.key = "Version";
	versionMap.value = "0.0.1";
	papyrusVersionEAnnotation.details.add(versionMap);
	var commentMap = new Profile!EStringToStringMapEntry;
	commentMap.key = "Comment";
	commentMap.value = "";
	papyrusVersionEAnnotation.details.add(commentMap);
	var copyrightMap = new Profile!EStringToStringMapEntry;
	copyrightMap.key = "Copyright";
	copyrightMap.value = "";
	papyrusVersionEAnnotation.details.add(copyrightMap);
	var dateMap = new Profile!EStringToStringMapEntry;
	dateMap.key = "Date";
	dateMap.value = "2017-02-01";
	papyrusVersionEAnnotation.details.add(dateMap);
	var authorMap = new Profile!EStringToStringMapEntry;
	authorMap.key = "Author";
	authorMap.value = "";
	papyrusVersionEAnnotation.details.add(authorMap);
}
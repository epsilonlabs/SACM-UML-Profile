@gmf
@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@namespace(uri="http://www.goalstructuringnotation.info/1.0", prefix="gsn")
package GSN;

@namespace(uri="http://www.goalstructuringnotation.info/1.0/commons", prefix="GSN_Commons")
package Commons {
  @Comment(text="Base class for SACM")
  abstract class SACMElement {
  }

  @Comment(text="Base element for the majority of modeling elements")
  abstract class ModelElement extends SACMElement {

    @Comment(text="To uniquely identifies the element within the scope of the model")
    attr String gid;

    @Comment(text="The name of the element")
    attr String name;
    attr Boolean uninstantiated;
    val Terminology.PlaceHolder[*] roles;
    @Comment(text="Allows constraints to be added to the element")
    val ImplementationConstraint[*] inplementationConstraint;
  }

  @Comment(text="UtilityElement supports the specification of additional information for a ModelElement")
  abstract class UtilityElement extends SACMElement {

    @Comment(text="Simple expression")
    attr String sExpression;

    @Comment(text="Expression that contains the value of the element")
    val Terminology.Expression[1] expression;
  }

  @Comment(text="To indicate the conditions to fulfill in order to allow an abstract ModeElement to become non-abstract")
  abstract class ImplementationConstraint extends UtilityElement {
  }

  @Comment(text="To provide details about a Modelelement in relation to aspects such as their content of purpose")
  abstract class Description extends UtilityElement {
  }

  @Comment(text="To specify additional generic, unstructured, untyped information about a ModelElement")
  abstract class Note extends UtilityElement {
  }

  @Comment(text="To specify attributes and their corresponding values for a ModelElement")
  abstract class TaggedValue extends UtilityElement {

    @Comment(text="Simple key")
    attr String sKey;

    @Comment(text="the key of the tagged value")
    val Terminology.Expression key;
  }

}

@Comment(text="")
@namespace(uri="http://www.goalstructuringnotation.info/1.0/packages", prefix="GSN_Packages")
package Packages {
  @Comment(text="Root class for creating structured assurance cases")
  abstract class AssuranceCasePackage extends Artefact.ArtefactElement {

    @Comment(text="A collection of optional citations to other AssuranceCasePackages")
    val AssuranceCasePackageCitation[*] assuranceCasePackageCitation;

    @Comment(text="Optional sub-packages")
    val AssuranceCasePackage[*] assuranceCasePackage;

    @Comment(text="A number of interfaces that the current package may implement")
    ref AssuranceCasePackageInterface[*] ~interface;

    @Comment(text="A number of argument packages")
    val Argumentation.ArgumentPackage[*] argumentPackage;

    @Comment(text="A number of artfact sub-packages")
    val Artefact.ArtefactPackage[*] artefactPackage;

    @Comment(text="A number of optional terminology sub-packages")
    val Terminology.TerminologyPackage[*] terminologyPackage;
  }

  @Comment(text="Enables the declaration of the elements of an AssuranceCasePackage that might be refered to in another AssuranceCasePackage")
  abstract class AssuranceCasePackageInterface extends AssuranceCasePackage {
  }

  @Comment(text="Used to cite another AssuranceCasePackage, used when there is a need to refer to another AssuanceCasePackage")
  abstract class AssuranceCasePackageCitation extends AssuranceCasePackage {
    ref AssuranceCasePackage[1] citedPackage;
  }

}

@namespace(uri="http://www.goalstructuringnotation.info/1.0/terminology", prefix="GSN_Terminology")
package Terminology {
  @Comment(text="Base class for specifying the terminology aspects of an assurance case")
  abstract class TerminologyElement extends Commons.ModelElement {
  }

  @Comment(text="Container class for SACM terminology assets")
  abstract class TerminologyPackage extends TerminologyElement {

    @Comment(text="Contained assets")
    val TerminologyAsset[*] terminologyAsset;

    @Comment(text="Sub packages")
    val TerminologyPackage[*] terminologyPackage;

    @Comment(text="Citations contained in the current TerminologyPackage")
    val TerminologyPackageCitation[*] terminologyPackageCitation;
  }

  @Comment(text="Used to refer to another TerminologyPackage")
  abstract class TerminologyPackageCitation extends TerminologyPackage {

    @Comment(text="Cited TerminologyPackage")
    ref TerminologyPackage citedPackage;
  }

  @Comment(text="Base class for terminology assets")
  abstract class TerminologyAsset extends TerminologyElement {
  }

  @Comment(text="Describes categories of ExpressionElements and used to group these elements within TerminologyPackages")
  abstract class Category extends TerminologyAsset {
  }

  @Comment(text="Base class for expressions in SACM")
  abstract class ExpressionElement extends TerminologyAsset {

    @Comment(text="Category(-ies) that the current element belongs to")
    ref Category[*] category;
  }

  @Comment(text="Used to model abstract/concrete phrases in SACM")
  abstract class Expression extends ExpressionElement {

    @Comment(text="Used to record the value of the expression")
    attr String value;

    @Comment(text="Optional reference to other ExpressionElements forming part of the StructuredExpression")
    ref ExpressionElement[*] element;
  }

  abstract class Term extends ExpressionElement {

    @Comment(text="An attribute recording the value of the term")
    attr String value;

    @Comment(text="An external reference")
    attr String externalReference;
  }
  
  class PlaceHolder extends Term {
  	
  }

  abstract class TerminologyAssetCitation extends ExpressionElement {
    ref TerminologyAsset[1] citedElement;
  }

}

@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="http://www.goalstructuringnotation.info/1.0/argumentation", prefix="GSN_Argumentation")
package Argumentation {
  abstract class ArgumentationElement extends Commons.ModelElement {

    @Comment(text="Content")
    attr String content;
  }

  @Comment(text="Container for a structured argument represented using SACM")
  abstract class ArgumentPackage extends ArgumentationElement {
  }

  @gmf.diagram
  class Module extends ArgumentPackage {

    @gmf.compartment
    val ArgumentAsset[*] argumentAsset;
  }

  @Comment(text="Used to cite another ArgumentPackage")
  abstract class ArgumentPackageCitation extends ArgumentPackage {
    ref ArgumentPackage[1] citedPackage;
  }

  @Comment(text="Record the mapping between two or more ArgumentPackages")
  abstract class ArgumentPackageBinding extends ArgumentPackage {

    @Comment(text="To be discussed")
    ref ArgumentPackage[2..*] participantPackage;
  }

  class Contract extends ArgumentPackageBinding {
  }

  @Comment(text="Used to declare the ArgumentAssets contained in an ArgumentPackage")
  abstract class ArgumentPackageInterface extends ArgumentPackage {
  }

  @Comment(text="Base class for the elements of structured argument in SACM")
  abstract class ArgumentAsset extends ArgumentationElement {
  }

  @Comment(text="Used to record the popositions of Argumentation")
  abstract class Assertion extends ArgumentAsset {
  }

  abstract class ArtefactElementCitation extends ArgumentAsset {
    attr String externalReference;
  }

  class Solution extends ArtefactElementCitation {
    attr Boolean isPublic;
  }

  @Comment(text="Used to cite ArgumentAsset")
  abstract class ArgumentAssetCitation extends ArgumentAsset {

    @Comment(text="Refers to another ArgumentAsset")
    ref ArgumentAsset[1] citedAsset;
  }

  class AwayGoal extends ArgumentAssetCitation {
    ref Goal awayGoal;
    ref Module moduleIdentifier;
  }

  class AwaySolution extends ArgumentAssetCitation {
    ref Solution awaySolution;
    ref Module moduleIdentifier;
  }

  class AwayContext extends ArgumentAssetCitation {
    ref Context awayContext;
    ref Module moduleIdentifier;
  }

  @Comment(text="Used to record the propositions of any structured argument")
  abstract class Claim extends Assertion {
  }

  @gmf.node(label="gid")
  @Ecore(constraints="isValidGoal")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(isValidGoal="
			(self.gid <> null and self.gid.size() > 0) 
			and
			if self.toBeSupportedByContract <> null
			then
				if self.undeveloped <> null
				then self.toBeSupportedByContract xor self.undeveloped
				else true
				endif
			else
				true
			endif
			")
  class Goal extends Claim {
    attr Boolean public;
    attr Boolean undeveloped;
    attr Boolean toBeSupportedByContract;
  }

  @gmf.node(label="gid")
  class Justification extends Claim {
  }

  @gmf.node(label="gid")
  class Assumption extends Claim {
  }

  @Comment(text="Used to provide additional description or explanation of the asserted inference or challange that connects one or more Claims")
  abstract class ArgumentReasoning extends ArgumentAsset {
  }

  @gmf.node(label="gid")
  class Strategy extends ArgumentReasoning {
    attr Boolean undeveloped;
  }

  @gmf.node(label="gid")
  class Context extends ArgumentAsset {
    attr Boolean isPublic;
    attr Boolean refersToExternalMaterial;
  }

  @Comment(text="Abstract association class that enables the ArgumentAssets of any structured argument to be linked together")
  abstract class AssertedRelationship extends Assertion {

    @Comment(text="Source of the relationship")
    ref ArgumentAsset[*] source;

    @Comment(text="Target of the relationship")
    ref ArgumentAsset[*] target;
    attr Integer requires = "-1";
    attr Boolean many = "false";
    attr String manyCondition;
    attr Boolean optional = "false";
    attr String selectionCondition;
  }

  @Comment(text="Records the inference that a user declares to exist between on or more Assertion and another Assertion")
  abstract class AssertedInference extends AssertedRelationship {
  }

  @gmf.link(source="source", target="target", width="2")
  @Ecore(constraints="isValidSupportedBy")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(isValidSupportedBy="
			self.source->forAll(s|(s.oclIsTypeOf(Goal)) or (s.oclIsTypeOf(Strategy))) and
			self.target->forAll(t|(t.oclIsTypeOf(Goal)) or
				(t.oclIsTypeOf(Strategy)) or
				(t.oclIsTypeOf(Solution)) or
				(t.oclIsTypeOf(AwayGoal)) or
				(t.oclIsTypeOf(AwaySolution)) or
				(t.oclIsTypeOf(Module)) or
				(t.oclIsTypeOf(Contract))
			)
			and
			self.source->size() = 1
			")
  class SupportedBy extends AssertedRelationship {
  }

  @Comment(text="Records the declaration that one or more artefacts of Evidence provide information that helps establish the truth of a Claim")
  abstract class AssertedEvidence extends AssertedRelationship {
  }

  @Comment(text="Records the challenge that a user declares to exist between one or more Claims and another Claim")
  abstract class AssertedChallenge extends AssertedRelationship {
  }

  @Comment(text="Used to associate evidence to a Claim, where this evidence is being asserted to infer that the Claim is false")
  abstract class AssertedCounterEvidence extends AssertedRelationship {
  }

  @Comment(text="Used to declare that the artefact cited by an ArtefactElementCitation provides the context for the interpretation and scoping of a Claim")
  abstract class AssertedContext extends AssertedRelationship {
  }

  @gmf.link(source="source", target="target", width="2")
  @Ecore(constraints="isValidInContextOf")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(isValidInContextOf="
			self.source->forAll(s|s.oclIsTypeOf(Goal) or s.oclIsTypeOf(Strategy)) and
			self.target->forAll(t|(t.oclIsTypeOf(Context)) or 
				(t.oclIsTypeOf(Assumption)) or 
				(t.oclIsTypeOf(Justification)) or
				(t.oclIsTypeOf(AwayGoal)) or
				(t.oclIsTypeOf(AwayContext)) or
				(t.oclIsTypeOf(Module))
			)
			and
			self.source->size() <= 1 
			and
			self.target->size() <= 1")
  class InContextOf extends AssertedContext {
  }

}

@namespace(uri="http://www.goalstructuringnotation.info/1.0/artefact", prefix="GSN_Artefact")
package Artefact {
  @Comment(text="To specify all the identifiable units of data modeled and managed in a structured assurance case")
  abstract class ArtefactElement extends Commons.ModelElement {
  }

  abstract class ArtefactPackage extends ArtefactElement {

    @Comment(text="An optional set of citation to other ArtefactPackages")
    val ArtefactPackageCitation[*] artefactPackageCitation;

    @Comment(text="An optional set of ArtefactAsset elements")
    val ArtefactAsset[*] artefactAsset;

    @Comment(text="An optional set of contained ArtefactPackage elements")
    val ArtefactPackage[*] artefactPackage;
    ref ArtefactPackageInterface[*] ~interface;
  }

  @Comment(text="Used to cite another ArtefactPackage")
  abstract class ArtefactPackageCitation extends ArtefactPackage {

    @Comment(text="Cited ArtefactPackage")
    ref ArtefactPackage[1] citedPackage;
  }

  @Comment(text="Used to record ArtefactAssertRelationships between the ArtefactAssets of two or more ArtefactPackages")
  abstract class ArtefactPackageBinding extends ArtefactPackage {

    @Comment(text="The ArtefactPackages containing the ArtefactAssets being related together by the ArtefactPackageBinding")
    ref ArtefactPackage[2..*] participantpackage;
  }

  @Comment(text="Defines an interface that may be exchanged between users")
  abstract class ArtefactPackageInterface extends ArtefactPackage {
  }

  @Comment(text="Represents the artefact-specific pieces of information of an assurance case")
  abstract class ArtefactAsset extends ArtefactElement {
  }

  @Comment(text="Allows an ArtefactPackage to refer to the components of another ArtefactPackage")
  abstract class ArtefactAssetCitation extends ArtefactAsset {
    ref ArtefactAsset[1] citedAsset;
  }

  @Comment(text="Represents the distinguishable units of data used in an assurance case")
  abstract class Artefact extends ArtefactAsset {

    @Comment(text="Version of the artefact")
    attr String version;

    @Comment(text="Date of creation")
    attr EDate date;

    @Comment(text="Properties this Artefact possesses")
    val ArtefactProperty[*] artefactProperty;

    @Comment(text="Set of ArtefactEvents that represent the lifecycle of the Arteface")
    val ArtefactEvent[*] artefactEvent;
  }

  @Comment(text="Enables the specification of the characteristics of an Artefact")
  abstract class ArtefactProperty extends ArtefactAsset {
  }

  @Comment(text="Enables the specification of the events in the lifecycle of an Artefact")
  abstract class ArtefactEvent extends ArtefactAsset {

    @Comment(text="date when the event occurred")
    attr EDate date;
  }

  @Comment(text="Corresponds ot the tangible objects representing an Artefact")
  abstract class Resource extends ArtefactAsset {

    @Comment(text="The path or URL specifying the location of the Resource")
    attr String location;
  }

  @Comment(text="Represents units of work related to the management of ArtefactAssets")
  abstract class Activity extends ArtefactAsset {
    attr EDate startTime;
    attr EDate endTime;
  }

  @Comment(text="Represents techniques associated with Artefacts")
  abstract class Technique extends ArtefactAsset {
  }

  @Comment(text="Enables the specification of the parties involved in the management of ArtefactAssets")
  abstract class Participant extends ArtefactAsset {
  }

  @Comment(text="Enables the ArtefactAssets of an assurance case to be linked together")
  abstract class ArtefactAssetRelationship extends ArtefactAsset {
    ref ArtefactAsset[*] source;
    ref ArtefactAsset[*] target;
  }

  @Comment(text="Enables two Artefacts to be linked together")
  abstract class ArtefactRelationship extends ArtefactAssetRelationship {
  }

  @Comment(text="Enables two Activities to be related together")
  abstract class ActivityRelationship extends ArtefactAssetRelationship {
  }

  @Comment(text="Enables Artefact and an Activity to be Linked together")
  abstract class ArtefactActivityRelationship extends ArtefactAssetRelationship {
  }

  @Comment(text="Enables an Artefact and a Technique to be linked together")
  abstract class ArtefactTechniqueRelationship extends ArtefactAssetRelationship {
  }

  @Comment(text="Enables a Participant to be linked to other ArtefactAssets")
  abstract class ParticipantRoleRelationship extends ArtefactAssetRelationship {
  }

  @Comment(text="Enables an Artefact and a Resource to be linked together")
  abstract class ArtefactResourceRelationship extends ArtefactAssetRelationship {
  }

}


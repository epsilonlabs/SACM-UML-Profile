@namespace(uri="http://www.goalstructuringnotation.info/1.0", prefix="gsn")
package GSN;

@namespace(uri="http://www.goalstructuringnotation.info/gsn/core", prefix="GSN_Core")
package Core {
  abstract class GSNElement {
  	val ArgumentPatterns.UninstantiatedEntity[1] uninstantiatedEntity;
  }

  abstract class IdentifiableElement extends GSNElement {
    attr String identifier;
    attr String statement;
  }

  abstract class ContextualElement extends IdentifiableElement {
  }

  class Context extends ContextualElement {
    val ModularExtensions.Visibility[1] visibility;
  }

  class Justification extends ContextualElement {
  }

  class Assumption extends ContextualElement {
  }

  abstract class SturcturingElement extends IdentifiableElement {
  }

  abstract class DescomposableStructuringElement extends SturcturingElement {
    val InContextOf[*]#source inContextOf;
    val UndevelopedEntity[*] undevelopedEntity;
  }
  
  abstract interface ModularStructuringElement extends SturcturingElement {
  }
  
  class Goal extends DescomposableStructuringElement, ModularStructuringElement {
    val ModularExtensions.Visibility[1] visibility;
    val GoalSupportedBy[*] supportedBy;
    val ModularExtensions.ToBeSupportedByContract[*] toBeSupportedByContract;
  }

  class Strategy extends DescomposableStructuringElement {
    val StrategySupportedBy[*] supportedBy;
  }

  class Solution extends SturcturingElement {
    val ModularExtensions.Visibility[1] visibility;
  }

  abstract class UndevelopedElement extends GSNElement {
  }

  class UndevelopedEntity extends UndevelopedElement {
  }

  class UndevelopedGoal extends Goal, UndevelopedElement {
  }

  abstract class Relationship extends GSNElement {
  }

  abstract class SupportedBy extends Relationship {
    ref SturcturingElement[1] source;
  }

  class GoalSupportedBy extends SupportedBy {
    val SturcturingElement[1] target;
  }

  class StrategySupportedBy extends SupportedBy {
    val ModularStructuringElement[1] target;
  }

  class InContextOf extends Relationship {
    ref DescomposableStructuringElement[1]#inContextOf source;
    val ContextualElement[1] target;
  }

}

@namespace(uri="http://www.goalstructuringnotation.info/gsn/argumentpatterns", prefix="GSN_ArgumentPatterns")
package ArgumentPatterns {
  abstract class OptionalSupportedBy extends Core.SupportedBy {
    attr int required;
  }

  class OptionalGoalSupportedBy extends OptionalSupportedBy, Core.GoalSupportedBy {
  }

  class OptionalStrategySupportedBy extends OptionalSupportedBy, Core.StrategySupportedBy {
  }

  abstract class UninstantiatedElement extends Core.GSNElement {
  }

  class UninstantiatedEntity extends UninstantiatedElement {
  }
}

@namespace(uri="http://www.goalstructuringnotation.info/gsn/modularextensions", prefix="GSN_ModularExtensions")
package ModularExtensions {

	abstract interface AwayElement extends Core.GSNElement {
		attr String moduleIdentifier;
	}

	class AwayGoal extends Core.ModularStructuringElement, AwayElement, Core.ContextualElement {
	}
	
	class AwaySolution extends Core.ModularStructuringElement, AwayElement {
	}
	
	class AwayContext extends Core.Context, AwayElement {
	}
	
	class Module extends Core.ModularStructuringElement, Core.ContextualElement {
		val Core.Goal[1] argument;
		val ContractModule[*] contracts;
		ref ContractModule[*] contracted;
	}
	
	class ContractModule extends Core.ModularStructuringElement, Core.ContextualElement {
		ref Module[1] client;
		ref Module[1] contractor;
	}
	
	abstract class Visibility extends Core.GSNElement {
		
	}
	
	class PublicIndicator extends Visibility {
		
	}

	class ToBeSupportedByContract extends Core.GSNElement {
		
	}
}


pre {
	"Begin Transformation...".println();
	var aeToDiscard = new Sequence;
}

post {
	"Transformation Complete".println();
	for(ae in aeToDiscard)
	{
		delete ae;
	}
}

rule Module2ArgumentPackage
	transform m:GSN!Module
	to ap: SACM!ArgumentPackage{
	"this is run".println();
	if(m.uninstantiated = true)
	{
		ap.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	ap.name = m.name;
	ap.argumentAsset = m.argumentAsset.equivalent();
}

rule Goal2Claim 
	transform g: GSN!Goal
	to c: SACM!Claim {
	c.name = g.name;
	
	c.description = g.description.equivalent();
	
	//normal goal
	if(g.undeveloped = false and g.toBeSupportedByContract = false and g.uninstantiated = false)
	{
	}
	//Undeveloped Goal
	else if(g.undeveloped = true and g.toBeSupportedByContract = false and g.uninstantiated = false)
	{
		c.taggedValue.add(createTaggedValueWithSimpleKey("undeveloped"));
	}
	//Uninstantiated Goal
	else if(g.undeveloped = false and g.toBeSupportedByContract = false and g.uninstantiated = true)
	{
		c.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	//ToBeSupportedByContract Goal
	else if(g.undeveloped = false and g.toBeSupportedByContract = true and g.uninstantiated = false)
	{
		c.toBeSupported = true;
		c.taggedValue.add(createTaggedValueWithSimpleKey("toBeSupportedByContract"));
	}
	else if(g.undeveloped = false and g.toBeSupportedByContract = true and g.uninstantiated = true)
	{
		c.isAbstract = true;
		c.toBeSupported = true;
		c.taggedValue.add(createTaggedValueWithSimpleKey("toBeSupportedByContract"));
	}
}

rule Description2Description 
	transform d1: GSN!Description
	to d2: SACM!Description {
	d2.sExpression = d1.sExpression;
	if(d1.expression.isDefined())
	{
		d2.expression = d1.expression.equivalent();
	}
}

rule Expression2Expression
	transform e1: GSN!Expression
	to e2: SACM!Expression {
	e2.value = e1.value;
	e2.element.addAll(e1.element.equivalent());
}

rule Term2Term
	transform t1: GSN!Term
	to t2: SACM!Term {
	t2.value = t1.value;
	t2.externalReference = t1.externalReference;
}

rule Solution2ArtefactElementCitation
	transform s: GSN!Solution
	to aec: SACM!ArtefactElementCitation {
	aec.name = s.name;
	aec.content = s.content;
	if(s.uninstantiated = true)
	{
		aec.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
}

rule Strategy2ArgumentReasoning 
	transform s: GSN!Strategy
	to ai: SACM!AssertedInference, ae: SACM!AssertedEvidence, ar: SACM!ArgumentReasoning {
	
	var upperLevel = getSupportedByForStrategyAsTarget(s);
	var lowerLevel = getSupportedByForStrategyAsSource(s);

	if(s.uninstantiated = true)
	{
		ar.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	ar.name = s.name;
	ar.content = s.content;
	
	var supportedByConnectingSolutions: Collection = lowerLevel.select(sb|sb.target.exists(t|t.isTypeOf(GSN!Solution)));
	if(supportedByConnectingSolutions.isEmpty())
	{
		aeToDiscard.add(ae);
	}
	else
	{
		ae.source.addAll(supportedByConnectingSolutions.target.flatten().asSet().equivalent());
		ae.target.addAll(upperLevel.source.flatten().asSet().equivalent());
		ae.reasoning = ar;
	}
	ai.source.addAll(lowerLevel.target.flatten().asSet().equivalent());
	ai.target.addAll(upperLevel.source.flatten().asSet().equivalent());
	ai.reasoning = ar;
}

rule Context2ArtefactElementCitation
	transform c: GSN!Context
	to aec: SACM!ArtefactElementCitation {
	guard: c.refersToExternalMaterial = true
	aec.name = c.name;
	aec.content = c.content;
	if(c.uninstantiated = true)
	{
		aec.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
}

rule Context2Claim 
	transform context: GSN!Context
	to claim: SACM!Claim {
	guard: context.refersToExternalMaterial = false or context.refersToExternalMaterial.isUndefined()
	if(c.uninstantiated = true)
	{
		claim.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	claim.isAbstract = false;
	claim.assumed = false;
	claim.name = context.name;
	claim.content = context.content;
	var taggedValue = new SACM!TaggedValue;
	taggedValue.sKey = "isBasic";
	claim.taggedValue.add(taggedValue);
	//discuss
}

rule Justification2Claim
	transform j: GSN!Justification
	to c: SACM!Claim {
	if(j.uninstantiated = true)
	{
		c.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	c.isAbstract = false;
	c.assumed = false;
	c.name = j.name;
	c.content = j.content;
	//justification should be a basic claim?
}

rule Assumption2Claim
	transform a: GSN!Assumption
	to c: SACM!Claim {
	if(a.uninstantiated = true)
	{
		c.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	c.isAbstract = false;
	c.assumed = true;
	c.name = a.name;
	c.content = a.content;
}

rule SupportedBy2AssertedEvidence
	transform sb: GSN!SupportedBy
	to ae: SACM!AssertedEvidence {
	guard : sb.source.forAll(s|s.isTypeOf(GSN!Goal)) and sb.target.forAll(t|t.isTypeOf(GSN!Solution))
	if(sb.uninstantiated = true)
	{
		ae.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	ae.source.addAll(sb.target.equivalent());
	ae.target.addAll(sb.source.equivalent());
}

rule SupportedBy2AssertedInference
	transform sb: GSN!SupportedBy
	to ai: SACM!AssertedInference {
	guard : sb.source.forAll(s|s.isTypeOf(Goal)) and sb.target.forAll(t|t.isTypeOf(Goal))
	if(sb.uninstantiated = true)
	{
		ai.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	ai.source.addAll(sb.target.equivalent());
	ai.target.addAll(sb.source.equivalent());	
}

rule InContextOf2AssertedContext
	transform ico: GSN!InContextOf
	to ac: SACM!AssertedContext {
	if(ico.uninstantiated = true)
	{
		ac.taggedValue.add(createTaggedValueWithSimpleKey("uninstantiated"));
	}
	ac.source.addAll(ico.target.equivalent());
	ac.target.addAll(ico.source.equivalent());
}

operation getSupportedByForStrategyAsSource(strategy: GSN!Strategy)
{
	var allSupportedBy = getAllSupportedBy();
	
	return allSupportedBy.select(sb|sb.source.includes(strategy));
}

operation getSupportedByForStrategyAsTarget(strategy: GSN!Strategy)
{
	var allSupportedBy = getAllSupportedBy();
	return allSupportedBy.select(sb|sb.target.includes(strategy));
}

@cached
operation getAllSupportedBy()
{
	return GSN!SupportedBy.allInstances();
}

operation createTaggedValueWithSimpleKey(key: String)
{
	var taggedValue = new SACM!TaggedValue;
	taggedValue.sKey = key;
}
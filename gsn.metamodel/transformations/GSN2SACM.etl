rule Goal2Claim 
	transform g: GSN!Goal
	to c: SACM!Claim {
	c.gid = g.gid;
	c.content = g.content;
	
	//normal goal
	if(g.undeveloped = false and g.toBeSupportedByContract = false and g.uninstantiated = false)
	{
		c.assumed = false;
		c.isAbstract = false;
	}
	//Undeveloped Goal
	else if(g.undeveloped = true and g.toBeSupportedByContract = false and g.uninstantiated = false)
	{
		c.assumed = false;
		c.isAbstract = true;
	}
	//Uninstantiated Goal
	else if(g.undeveloped = false and g.toBeSupportedByContract = false and g.uninstantiated = true)
	{
		c.assumed = true;
		c.isAbstract = true;
	}
	//ToBeSupportedByContract Goal
	else if(g.undeveloped = false and g.toBeSupportedByContract = true and g.uninstantiated = false)
	{
		c.assumed = false;
		c.isAbstract = false;
		c.toBeSupported = true;
	}
	else if(g.undeveloped = false and g.toBeSupportedByContract = true and g.uninstantiated = true)
	{
		c.assumed = true;
		c.isAbstract = true;
		c.toBeSupported = true;
	}
}

rule Solution2ArtefactElementCitation
	transform s: GSN!Solution
	to aec: SACM!ArtefactElementCitation {
	aec.gid = s.gid;
	aec.content = s.content;
	if(s.uninstantiated = true)
	{
		aec.isAbstract = true;
	}
	else
	{
		aec.isAbstract = false;
	}
}

rule Strategy2ArgumentReasoningConnectingGoal 
	transform s: GSN!Strategy
	to ai: SACM!AssertedInference, ae: SACM!AssertedEvidence, ar: SACM!ArgumentReasoning {
	
	var upperLevel = getSupportedByForStrategyAsTarget(s);
	var lowerLevel = getSupportedByForStrategyAsSource(s);

	ar.gid = s.gid;
	ar.content = s.content;
	
	var supportedByConnectingSolutions: Collection = lowerLevel.select(sb|sb.target.exist(t|t.isTypeOf(GSN!Solution)));
	if(supportedByConnectingSolutions.isEmpty())
	{
		delete ae;
	}
	else
	{
		ae.source.addAll(supportedByConnectingSolutions.target.flatten().asSet());
		ae.target.addAll(upperLevel.source.flatten().asSet());
		ae.reasoning = ar;
	}
	ai.source.addAll(lowerLevel.target.flatten().asSet());
	ai.target.addAll(upperLevel.source.flatten().asSet());
	ai.reasoning = ar;
}

rule Context2ArgumentElementCitation
	transform c: GSN!Context
	to aec: SACM!ArgumentElementCitation {
	guard: c.refersToExternalMaterial
	aec.gid = c.gid;
	aec.content = c.content;
	aec.externalReference = c.externalReference;
	if(c.uninstantiated = true)
	{
		c.isAbstract = true;
	}
	else 
	{
		c.isAbstract = false;
	}
}

rule Context2Claim 
	transform context: GSN!Context
	to claim: SACM!Claim {
	guard: not context.refersToExternalMaterial
	c.isAbstract = false;
	c.assumed = false;
	claim.gid = context.gid;
	claim.content = context.content;
	claim.taggedValue.add(createTaggedValueWithSimpleKey("isBasic"));
}

rule Justification2Claim
	transform j: GSN!Justification
	to c: SACM!Claim {
	c.isAbstract = false;
	c.assumed = false;
	c.gid = j.gid;
	c.content = j.content;
}

rule Assumption2Claim
	transform j: GSN!Assumption
	to c: SACM!Claim {
	c.isAbstract = false;
	c.assumed = true;
	c.gid = j.gid;
	c.content = j.content;
}

rule SupportedBy2AssertedEvidence
	transform sb: GSN!SupportedBy
	to ae: SACM!AssertedEvidence {
	guard : sb.source.forAll(s|s.isTypeOf(GSN!Goal)) and sb.target.forAll(t|t.isTypeOf(GSN!Solution))
	ae.source.addAll(sb.target.equivalent());
	ae.target.addAll(sb.source.equivalent());
}

rule SupportedBy2AssertedInference
	transform sb: GSN!SupportedBy
	to ai: SACM!AssertedInference {
	guard : sb.source.forAll(s|s.isTypeOf(Goal)) and sb.target.forAll(t|t.isTypeOf(Goal))
	ai.source.addAll(sb.target.equivalent());
	ai.target.addAll(sb.source.equivalent());	
}

rule InContextOf2AssertedContext
	transform ico: GSN!InContextOf
	to ac: SACM!AssertedContext {
	ac.source.addAll(ico.target);
	ac.target.addAll(ico.source);
}

operation getSupportedByForStrategyAsSource(strategy: GSN!Strategy)
{
	var allSupportedBy = getAllSupportedBy();
	return allSupportedBy.select(sb|sb.source = strategy);
}

operation getSupportedByForStrategyAsTarget(strategy: GSN!Strategy)
{
	var allSupportedBy = getAllSupportedBy();
	return allSupportedBy.select(sb|sb.target = strategy);
}

@cached
operation getAllSupportedBy()
{
	return GSN!SupportedBy.allInstances();
}

operation TaggedValue createTaggedValueWithSimpleKey(key: String)
{
	var taggedValue = new SACM!TaggedValue;
	taggedValue.sKey = key;
}